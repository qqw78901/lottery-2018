
var _createClass = (function() {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
        }
    }
    return function(Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);
        if (staticProps) defineProperties(Constructor, staticProps);
        return Constructor;
    };
})();

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

$(document).ready(function() {
    new Index();
});

var BS = (function() {
    function BS() {
        _classCallCheck(this, BS);
    }

    _createClass(BS, null, [
        {
            key: "fetch",
            value: function fetch(url, data, type) {
                return new Promise(function(resolve) {
                    $.ajax({
                        type: type ? type : "GET",
                        data: data ? data : {},
                        url: url,
                        success: function success(resp) {
                            resolve(resp);
                        }
                    });
                });
            }
        },
        {
            key: "run",
            value: function run() {
                return this.fetch("/run");
            }
        },
        {
            key: "stopAndResult",
            value: function stopAndResult(award_id) {
                return this.fetch("/draw_lottery", { award_id: award_id });
            }
        },
        {
            key: "getLucklessUsers",
            value: function getLucklessUsers() {
                return this.fetch("/luckless_users");
            }
        },
        {
            key: "getLuckyUsers",
            value: function getLuckyUsers() {
                return this.fetch("/lucky_users");
            }
        },
        {
            key: "getAwards",
            value: function getAwards() {
                return this.fetch("/awards");
            }
        },
        {
            key: "getAward",
            value: function getAward(award_id) {
                return this.fetch("/award", {
                    award_id: award_id
                });
            }
        },
        {
            key: "getUsers",
            value: function getUsers() {
                return this.fetch("/users");
            }
        }
    ]);

    return BS;
})();

var Tag = (function() {
    function Tag(entries) {
        _classCallCheck(this, Tag);

        this.id = "myCanvas";
        this.entries = entries;
        this.createCanvas();
    }

    _createClass(
        Tag,
        [
            {
                key: "createHTML",
                value: function createHTML() {
                    var html = ["<ul>"];
                    $(this.entries).each(function(i, val) {
                        var color = val.award_id ? "yellow" : "white";
                        html.push(
                            '<li><a href="javascript:void(0)" style="color: ' +
                            color +
                            ';" data-uid="' +
                            val.uid +
                            '" data-role="' +
                            val.role +
                            '">' +
                            val.name +
                            "</a></li>"
                        );
                        // html.push(`<li><a href="#" style="color:${color};">' + item.name + '</a></li>`);
                    });
                    html.push("</ul>");
                    return html.join("");
                }
            },
            {
                key: "createCanvas",
                value: function createCanvas() {
                    var canvas = document.createElement("canvas");
                    canvas.id = this.id;
                    canvas.width = 1024;
                    canvas.height = 600;
                    document.getElementById("holder").appendChild(canvas);
                    this.canvas = canvas;
                    canvas.innerHTML = this.createHTML();
                    TagCanvas.Start("myCanvas", "", {
                        textColour: null,
                        initial: Tag.speed(),
                        dragControl: 1,
                        textHeight: 14
                    });
                }
            },
            {
                key: "markYellow",
                value: function markYellow(users) {
                    var color = "yellow";
                    var _iteratorNormalCompletion = true;
                    var _didIteratorError = false;
                    var _iteratorError = undefined;

                    try {
                        for (
                            var _iterator = users[Symbol.iterator](), _step;
                            !(_iteratorNormalCompletion = (_step = _iterator.next()).done);
                            _iteratorNormalCompletion = true
                        ) {
                            var user = _step.value;

                            $(this.canvas)
                                .find("[data-uid=" + user.uid + "]")
                                .css("color", color);
                        }
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally {
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return) {
                                _iterator.return();
                            }
                        } finally {
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }

                    TagCanvas.Reload(this.id);
                }
            },
            {
                key: "fast",
                value: function fast() {
                    TagCanvas.SetSpeed(this.id, [5, 1]);
                }
            },
            {
                key: "stop",
                value: function stop() {
                    TagCanvas.SetSpeed(this.id, Tag.speed());
                    TagCanvas.Reload(this.id);
                }
            }
        ],
        [
            {
                key: "speed",
                value: function speed() {
                    return [0.1 * Math.random() + 0.01, -(0.1 * Math.random() + 0.01)];
                }
            }
        ]
    );

    return Tag;
})();

var Index = (function() {
    function Index() {
        var _this = this;

        _classCallCheck(this, Index);

        this.running = false;
        this.currentAward = "";
        this.entries = [];
        this.buildCloud().then(function() {
            _this.canvas3DTagCloud = new Tag(_this.entries);
        });
        this.bindEvent();
        this.initVisualSocket();
    }

    _createClass(Index, [
        {
            key: "buildCloud",
            value: function buildCloud() {
                var _this2 = this;

                return BS.getUsers().then(function(resp) {
                    console.log(resp);
                    _this2.entries = resp.data;
                });
            }
        },
        {
            key: "initVisualSocket",
            value: function initVisualSocket() {
                var _this3 = this;

                var tempAwardId = "";
                setInterval(function() {
                    tempAwardId = localStorage.getItem("current_award");
                    if (_this3.currentAward !== tempAwardId) {
                        /*change*/
                        // window.location.reload(1);
                        _this3.currentAward = tempAwardId;
                        _this3.refreshCurrentAward();
                    }
                }, 1000);
            }
        },
        {
            key: "refreshCurrentAward",
            value: function refreshCurrentAward() {
                if (this.currentAward === "") return;
                BS.getAward(this.currentAward).then(function(resp) {
                    console.log(resp);
                    if (resp.status === 200) {
                        var awardInfo = resp.data;
                        $("#currentAwardName").html(awardInfo.award_name);
                        $("#currentTimes").html(awardInfo.award_capacity);
                    }
                });
            }
        },
        {
            key: "bindEvent",
            value: function bindEvent() {
                var _this4 = this;

                $("#start").click(function() {
                    if (_this4.running) {
                        alert("正在抽奖");
                        return;
                    }
                    _this4.canvas3DTagCloud.fast();
                    BS.run().then(function(resp) {
                        console.log(resp);
                        _this4.running = true;
                    });
                });
                $("#end").click(function() {
                    if (!_this4.running) {
                        return;
                    }
                    console.log("click");
                    BS.stopAndResult(_this4.currentAward).then(function(resp) {
                        console.log(resp);
                        if (resp.status === 200) {
                            _this4.stopLottery(resp.data);
                            _this4.running = false;
                        } else {
                            _this4.running = false;
                            _this4.canvas3DTagCloud.stop();
                            layer.alert(resp.msg);
                        }
                    });
                });
                $(document).on("click", function() {
                    $("#result").hide();
                    $(".holder").removeClass("mask");
                });
                $("#luckyUsers").click(function() {
                    _this4.list();
                });
            }
        },
        {
            key: "stopLottery",
            value: function stopLottery(data) {
                this.canvas3DTagCloud.stop();
                this.currentlist(data);
                this.canvas3DTagCloud.markYellow(data);
            }

            /**
             * 当前轮结果
             * @param data
             */
        },
        {
            key: "currentlist",
            value: function currentlist(data) {
                // let offset = $(".holder").offset();
                var DOM = "";
                var _iteratorNormalCompletion2 = true;
                var _didIteratorError2 = false;
                var _iteratorError2 = undefined;

                try {
                    for (
                        var _iterator2 = data[Symbol.iterator](), _step2;
                        !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done);
                        _iteratorNormalCompletion2 = true
                    ) {
                        var user = _step2.value;

                        DOM +=
                            '<span class="' +
                            (user.role === 2 || user.role === 3 ? "sp animated flash" : "") +
                            '"><i>' +
                            user.name +
                            "<br>" +
                            user.uid +
                            "</i></span>";
                    }
                } catch (err) {
                    _didIteratorError2 = true;
                    _iteratorError2 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion2 && _iterator2.return) {
                            _iterator2.return();
                        }
                    } finally {
                        if (_didIteratorError2) {
                            throw _iteratorError2;
                        }
                    }
                }

                DOM += "";
                $("#result")
                    .show()
                    .html(DOM);
                setTimeout(function() {
                    $(".holder").addClass("mask");
                }, 10);
            }

            /**
             * 所有结果
             */
        },
        {
            key: "list",
            value: function list() {
                var offset = $(".holder").offset();
                var awards = {};
                var load = layer.load(2);
                BS.getAwards()
                    .then(function(resp) {
                        resp.data.map(function(val) {
                            console.log(val);
                            if (typeof awards[val.award_id] === "undefined") {
                                awards[val.award_id] = {};
                            }
                            awards[val.award_id].name = val.award_name;
                            awards[val.award_id].data = [];
                        });
                    })
                    .then(function() {
                        return BS.getLuckyUsers().then(function(resp) {
                            resp.data.map(function(val) {
                                awards[val.award_id].data.push(val);
                            });
                        });
                    })
                    .then(function() {
                        layer.close(load);
                        console.log(awards);
                        var content = "";
                        var _iteratorNormalCompletion3 = true;
                        var _didIteratorError3 = false;
                        var _iteratorError3 = undefined;

                        try {
                            for (
                                var _iterator3 = Object.keys(awards)[Symbol.iterator](), _step3;
                                !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next())
                                    .done);
                                _iteratorNormalCompletion3 = true
                            ) {
                                var key = _step3.value;

                                var award = awards[key];
                                var lisArray = award.data.map(function(data) {
                                    return (
                                        '<li class="' +
                                        (data.role == 2 || data.role == 3 ? "sp" : "") +
                                        '">' +
                                        data.name +
                                        "<span>\u3010" +
                                        data.uid +
                                        "\u3011</span></li>"
                                    );
                                });
                                if (lisArray.length !== 0) {
                                    content +=
                                        "\n                                <section>\n                                    <h5>" +
                                        award.name +
                                        "</h5>\n                                    <ul>\n                                    " +
                                        lisArray.join("") +
                                        "\n                                    </ul>\n                                </section>\n                    ";
                                }
                            }
                        } catch (err) {
                            _didIteratorError3 = true;
                            _iteratorError3 = err;
                        } finally {
                            try {
                                if (!_iteratorNormalCompletion3 && _iterator3.return) {
                                    _iterator3.return();
                                }
                            } finally {
                                if (_didIteratorError3) {
                                    throw _iteratorError3;
                                }
                            }
                        }

                        layer.open({
                            type: 1,
                            area: ["1024px", "600px"],
                            skin: "layui-layer-lan", //样式类名
                            offset: [offset.top, offset.left],
                            closeBtn: 1, //不显示关闭按钮
                            anim: 3,
                            title: "所有中奖名单",
                            shadeClose: false, //开启遮罩关闭
                            content: '\n<div class="luckerList">' + content + "\n</div>"
                        });
                    });
            }
        }
    ]);

    return Index;
})();
